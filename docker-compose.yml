services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # PgBouncer for Database Connection Pooling
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}
      PGBOUNCER_LISTEN_PORT: 6432
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable"
    networks:
      - backend-network
      - monitoring
    depends_on:
      db:
        condition: service_healthy

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter
    restart: unless-stopped
    command:
      - "--redis.addr=redis:6379"
      - "--redis.password=${REDIS_PASSWORD}"
    networks:
      - backend-network
      - monitoring
    depends_on:
      redis:
        condition: service_healthy

  # Django Web Application Service
  web:
    image: ganiyevuz/image-backend:latest
    restart: unless-stopped
    command: >
      /bin/bash -c "
      ./wait_for_db.sh pgbouncer 6432 &&
      python manage.py collectstatic --noinput &&
      python manage.py migrate &&
      gunicorn conf.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4
      "
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: "False"
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_HOST: pgbouncer
      DATABASE_PORT: 6432
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CACHE_BACKEND_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - backend-network
      - monitoring
    labels:
      traefik.enable: "true"
      traefik.http.routers.web.rule: "Host(`${DOMAIN}`)"
      traefik.http.routers.web.entrypoints: "websecure"
      traefik.http.routers.web.tls.certresolver: "le"
      traefik.http.services.web.loadbalancer.server.port: "8000"
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure

#  # Frontend Application Service
#  frontend:
#    image: ganiyevuz/image-frontend:latest
#    restart: unless-stopped
#    networks:
#      - frontend-network
#    depends_on:
#      web:
#        condition: service_started
#    labels:
#      traefik.enable: "true"
#      traefik.http.routers.frontend.rule: "Host(`${FRONTEND_DOMAIN}`)"
#      traefik.http.routers.frontend.entrypoints: "websecure"
#      traefik.http.routers.frontend.tls.certresolver: "le"
#      traefik.http.services.frontend.loadbalancer.server.port: "80"
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M

  # Nginx for Serving Static and Media Files
  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    volumes:
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
      - ./nginx_logs:/var/log/nginx
      - ./server/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - frontend-network
    depends_on:
      web:
        condition: service_started
    labels:
      traefik.enable: "true"
      traefik.http.routers.staticfiles.rule: "Host(`${DOMAIN}`) && (PathPrefix(`/static`) || PathPrefix(`/media`))"
      traefik.http.routers.staticfiles.entrypoints: "websecure"
      traefik.http.routers.staticfiles.tls.certresolver: "le"
      traefik.http.services.staticfiles.loadbalancer.server.port: "80"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Traefik Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - frontend-network
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik-dashboard.rule: "Host(`dashboard.${DOMAIN}`)"
      traefik.http.routers.traefik-dashboard.entrypoints: "websecure"
      traefik.http.routers.traefik-dashboard.tls.certresolver: "le"
      traefik.http.services.traefik-dashboard.loadbalancer.server.port: "8080"

  # Database Backup Service
  db_backup:
    image: prodrigestivill/postgres-backup-local
    restart: unless-stopped
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: "7"
      BACKUP_KEEP_WEEKS: "4"
      BACKUP_KEEP_MONTHS: "3"
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      WEBHOOK_URL_START: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=Backup%20Started"
      WEBHOOK_URL_SUCCESS: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=Backup%20Completed%20Successfully"
      WEBHOOK_URL_ERROR: "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=Backup%20Failed"
    volumes:
      - /var/opt/pgbackups:/backups:rw
      - ./send_backup.sh:/send_backup.sh
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - web
      - postgres-exporter
      - redis-exporter
      - traefik
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Grafana Visualization Service
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  grafana_data:

networks:
  frontend-network:
  backend-network:
  monitoring:
