name: Deploy Django Application

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Create .env file
        run: |
          touch .env
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_TYPE=${{ secrets.DATABASE_TYPE }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> .env
          echo "CACHE_BACKEND_URL=${{ secrets.CACHE_BACKEND_URL }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django project
        run: |
          python3 manage.py check

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env
          echo "DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_TYPE=${{ secrets.DATABASE_TYPE }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env
          echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> .env
          echo "CACHE_BACKEND_URL=${{ secrets.CACHE_BACKEND_URL }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> .env

      - name: Current files in the directory
        run: ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ secrets.DOCKER_USERNAME }}/image-backend:latest
          push: true

      - name: Setup SSH for Deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create directory on server if not exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /var/www/dev/server/"


      - name: Upload .env, docker-compose.traefik.yml to server
        run: |
          scp -o StrictHostKeyChecking=no .env docker-compose.traefik.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/dev/
          scp -o StrictHostKeyChecking=no ./server/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/dev/server/

      - name: Deploy using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /var/www/dev
          docker-compose -f docker-compose.traefik.yml pull
          docker-compose -f docker-compose.traefik.yml down
          docker-compose -f docker-compose.traefik.yml up -d
          EOF


# docker-compose -f docker-compose.traefik.yml up -d --remove-orphans flag removes any containers not defined in the current Compose file, which helps keep your setup clean.