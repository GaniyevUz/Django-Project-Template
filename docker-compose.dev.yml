services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER:-devuser}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-devpass}
      POSTGRES_DB: ${DATABASE_NAME:-devdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER:-devuser}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER:-devuser}:${DATABASE_PASSWORD:-devpass}@db:5432/${DATABASE_NAME:-devdb}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - dev-network
    depends_on:
      db:
        condition: service_healthy

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    restart: always
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter
    restart: always
    command:
      - "--redis.addr=redis:6379"
    ports:
      - "9121:9121"
    networks:
      - dev-network
    depends_on:
      redis:
        condition: service_healthy

  # Django Web Application Service
  web:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    command: >
      /bin/bash -c "
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - .:/app
      - static_volume_dev:/app/static
      - media_volume_dev:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: "dev-secret-key"
      DJANGO_DEBUG: "True"
      DATABASE_USER: ${DATABASE_USER:-devuser}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-devpass}
      DATABASE_NAME: ${DATABASE_NAME:-devdb}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - dev-network

  # Nginx for Serving Static and Media Files
  nginx:
    image: nginx:stable-alpine
    restart: always
    volumes:
      - static_volume_dev:/usr/share/nginx/html/static:ro
      - media_volume_dev:/usr/share/nginx/html/media:ro
      - ./logs:/var/log/nginx
      - ./server/nginx.dev.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - dev-network
    depends_on:
      web:
        condition: service_started

  # Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - dev-network
    depends_on:
      - web
      - postgres-exporter
      - redis-exporter

  # Grafana Visualization Service
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    networks:
      - dev-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  postgres_data_dev:
  redis_data_dev:
  static_volume_dev:
  media_volume_dev:
  grafana_data_dev:

networks:
  dev-network:
